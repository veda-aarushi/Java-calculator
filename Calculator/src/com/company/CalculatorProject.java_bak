
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.company;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.Scanner;
/**
 *
 * @author ParkerC
 */
public class CalculatorProject {    
    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) throws FileNotFoundException
    {
        
        // add a welcome message here
    	System.out.println("WELCOME TO MY CALCULATOR");
        
        
    	// comment out either startCalc() or testCalc() (just the method call below) 
    	// based on how you want to run the project:
    	// uncomment startCalc() to call your method for an interactive calculator
        // uncomment testCalc() to try out a bunch of 
        startCalc();   // you have to write this method below
                       // it should ask the user for input and print
                       // results until the user enters "quit" to stop
        
        // use this to validate your project (the calculator part, anyways) testCalc();     
    	// testCalc will call a calculate(String s) method that you create
        // as part of your overall project. This method will take the user's input, and return a String with the appropriate output.
        
        // add a goodbye message here
        
    }
public static void startCalc(){
	Scanner scanner = new Scanner (System.in);
    System.out.println ("Please enter an expression to calculate: ");
    String input = scanner.nextLine ();
    System.out.println (calculate (input));
        // your code here to get user input, and calculate/print results. You'll call
        // the calculate(String s) as part of your code here, which returns a String
        // with the result to print. 
        
    }
    
    


      
        // you'll probably call other methods (that you write) here to do work,
        // like deciding if it's a 2-part or 3-part expression, or calculating the result of a
        // 2-part expression or a 3-part expression
        

    public static double oneOperation (String input)
    {
        Scanner tokens = new Scanner (input);
        double result = 0;
        String trash;

        if (input.substring (0, 1).equals ("|"))
        {
            trash = tokens.nextLine ().substring (0,1);
            if (tokens.hasNextDouble ())
            {
                double num1 = tokens.nextDouble ();
                result = Math.abs (num1);
            }
        }

        else if (input.substring (0, 1).equals ("v"))
        {
            trash = tokens.nextLine ().substring (0,1);
            if (tokens.hasNextDouble ())
            {
                double num1 = tokens.nextDouble ();
                result = Math.sqrt(num1);
            }
        }

        else if (input.substring (0, 1).equals ("s"))
        {
            trash = tokens.nextLine ().substring (0,1);
            if (tokens.hasNextDouble ())
            {
                double num1 = tokens.nextDouble ();
                result = Math.sin (num1);
                //  ROUTE TO ONE OPERATION METHOD WITH ITS OWN CONDITIONS FOR EACH SPECIFIC OP.
            }
        }

        else if (input.substring (0, 1).equals ("c"))
        {
            trash = tokens.nextLine ().substring (0,1);
            if (tokens.hasNextDouble ())
            {
                double num1 = tokens.nextDouble ();
                result = Math.cos (num1);
            }
        }

        else if (input.substring (0, 1).equals ("t"))
        {
            trash = tokens.nextLine ().substring (0,1);
            if (tokens.hasNextDouble ())
            {
                double num1 = tokens.nextDouble ();
                result = Math.tan (num1);
            }
        }

        else if (input.substring (0, 1).equals ("~"))
        {
            trash = tokens.nextLine ().substring (0,1);
            if (tokens.hasNextDouble ())
            {
                double num1 = tokens.nextDouble ();
                result = Math.round (num1);
            }
        }
		return result;

    }
    
// add more methods here
//
// DO NOT MODIFY THE METHOD BELOW!!!
// YOU WILL CALL IT FROM MAIN TO TEST OUT YOUR OTHER CODE/METHODS
//
    public static void testCalc() throws FileNotFoundException{
        ArrayList<String> problems = new ArrayList<>();
        ArrayList<String> results = new ArrayList<>();
        // load problems from a file
        File fProblems = new File("problems.txt");
        Scanner sc = new Scanner(fProblems);        
        int count = 0;
        String line = "";
        int problemCount = 0;
        int resultCount = 0;
        while (sc.hasNextLine()){
            line = sc.nextLine();
            if (!line.startsWith("//") && !line.trim().equals("")){        // 
//ignore comments at the beginning
                problems.add(line.substring(3).trim());
                problemCount++;
                if (sc.hasNextLine()){
                    line = sc.nextLine();
                    if (!line.startsWith("//") && !line.trim().equals("")){
                        results.add(line.substring(3).trim());
                        resultCount++;
                    }
                } 
                count++;
            }
        }
        if (problemCount == resultCount){
            // now run the tests
            for (int i=0; i<problemCount; i++){
                String prob = problems.get(i);
                String result = calculate(prob);
                if (result == null){
                    System.out.println("FAILED test " + i);
                    System.out.println("Expression: " + problems.get(i));
                    System.out.println("Expected result: " + results.get(i));
                    System.out.println("Actual: null String returned from calculate()");
                } else {
                    if (result.equals(results.get(i))){
                        System.out.println("PASSED test " + i);
                    } else {
                        System.out.println("FAILED test " + i);
                        System.out.println("Expression: " + problems.get(i));
                        System.out.println("Expected result: " + results.get(i));
                        System.out.println("Actual: " + result);
                    }
                }
                    
            }
        } else {
            System.out.println("problem file error");
        }    
            
    }
    
    
    
    
}
